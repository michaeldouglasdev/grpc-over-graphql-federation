{"engineConfig":{"defaultFlushInterval":"500","datasourceConfigurations":[{"kind":"GRAPHQL","rootNodes":[{"typeName":"Query","fieldNames":["me"]},{"typeName":"User","fieldNames":["id","name","cpf","email","dateOfBirth","avatar","address"]},{"typeName":"Address","fieldNames":["id","name","country","state","city","district","street","number","complement"]}],"overrideFieldPathFromAlias":true,"customGraphql":{"fetch":{"url":{"staticVariableContent":"dns:///localhost:4011"},"method":"POST","body":{},"baseUrl":{},"path":{}},"subscription":{"enabled":true},"federation":{"enabled":true,"serviceSdl":"type Query {\n  me: User!\n}\n\ntype User @key(fields: \"id\") {\n  id: ID!\n  name: String!\n  cpf: String!\n  email: String!\n  dateOfBirth: String!\n  avatar: String!\n  address: Address!\n}\n\ntype Address @key(fields: \"id\") {\n  id: ID!\n  name: String!\n  country: String!\n  state: String!\n  city: String!\n  district: String!\n  street: String!\n  number: String!\n  complement: String\n}\n"},"upstreamSchema":{"key":"d1177e438c8b400dfcd567e9762c845f9765c1ef"},"grpc":{"mapping":{"version":1,"service":"ServiceService","operationMappings":[{"type":"OPERATION_TYPE_QUERY","original":"me","mapped":"QueryMe","request":"QueryMeRequest","response":"QueryMeResponse"}],"entityMappings":[{"typeName":"User","kind":"entity","key":"id","rpc":"LookupUserById","request":"LookupUserByIdRequest","response":"LookupUserByIdResponse"},{"typeName":"Address","kind":"entity","key":"id","rpc":"LookupAddressById","request":"LookupAddressByIdRequest","response":"LookupAddressByIdResponse"}],"typeFieldMappings":[{"type":"Query","fieldMappings":[{"original":"me","mapped":"me"}]},{"type":"User","fieldMappings":[{"original":"id","mapped":"id"},{"original":"name","mapped":"name"},{"original":"cpf","mapped":"cpf"},{"original":"email","mapped":"email"},{"original":"dateOfBirth","mapped":"date_of_birth"},{"original":"avatar","mapped":"avatar"},{"original":"address","mapped":"address"}]},{"type":"Address","fieldMappings":[{"original":"id","mapped":"id"},{"original":"name","mapped":"name"},{"original":"country","mapped":"country"},{"original":"state","mapped":"state"},{"original":"city","mapped":"city"},{"original":"district","mapped":"district"},{"original":"street","mapped":"street"},{"original":"number","mapped":"number"},{"original":"complement","mapped":"complement"}]}]},"protoSchema":"syntax = \"proto3\";\npackage service.v1;\n\noption go_package = \"github.com/wundergraph/service/pkg/generated/service/v1\";\n\nimport \"google/protobuf/wrappers.proto\";\n\n// Service definition for ServiceService\nservice ServiceService {\n  // Lookup Address entity by id\n  rpc LookupAddressById(LookupAddressByIdRequest) returns (LookupAddressByIdResponse) {}\n  // Lookup User entity by id\n  rpc LookupUserById(LookupUserByIdRequest) returns (LookupUserByIdResponse) {}\n  rpc QueryMe(QueryMeRequest) returns (QueryMeResponse) {}\n}\n\n// Key message for User entity lookup\nmessage LookupUserByIdRequestKey {\n  // Key field for User entity lookup.\n  string id = 1;\n}\n\n// Request message for User entity lookup.\nmessage LookupUserByIdRequest {\n  /*\n   * List of keys to look up User entities.\n   * Order matters - each key maps to one entity in LookupUserByIdResponse.\n   */\n  repeated LookupUserByIdRequestKey keys = 1;\n}\n\n// Response message for User entity lookup.\nmessage LookupUserByIdResponse {\n  /*\n   * List of User entities in the same order as the keys in LookupUserByIdRequest.\n   * Always return the same number of entities as keys. Use null for entities that cannot be found.\n   * \n   * Example:\n   *   LookupUserByIdRequest:\n   *     keys:\n   *       - id: 1\n   *       - id: 2\n   *   LookupUserByIdResponse:\n   *     result:\n   *       - id: 1 # User with id 1 found\n   *       - null  # User with id 2 not found\n   */\n  repeated User result = 1;\n}\n\n// Key message for Address entity lookup\nmessage LookupAddressByIdRequestKey {\n  // Key field for Address entity lookup.\n  string id = 1;\n}\n\n// Request message for Address entity lookup.\nmessage LookupAddressByIdRequest {\n  /*\n   * List of keys to look up Address entities.\n   * Order matters - each key maps to one entity in LookupAddressByIdResponse.\n   */\n  repeated LookupAddressByIdRequestKey keys = 1;\n}\n\n// Response message for Address entity lookup.\nmessage LookupAddressByIdResponse {\n  /*\n   * List of Address entities in the same order as the keys in LookupAddressByIdRequest.\n   * Always return the same number of entities as keys. Use null for entities that cannot be found.\n   * \n   * Example:\n   *   LookupUserByIdRequest:\n   *     keys:\n   *       - id: 1\n   *       - id: 2\n   *   LookupUserByIdResponse:\n   *     result:\n   *       - id: 1 # User with id 1 found\n   *       - null  # User with id 2 not found\n   */\n  repeated Address result = 1;\n}\n\n// Request message for me operation.\nmessage QueryMeRequest {\n}\n// Response message for me operation.\nmessage QueryMeResponse {\n  User me = 1;\n}\n\nmessage User {\n  string id = 1;\n  string name = 2;\n  string cpf = 3;\n  string email = 4;\n  string date_of_birth = 5;\n  string avatar = 6;\n  Address address = 7;\n}\n\nmessage Address {\n  string id = 1;\n  string name = 2;\n  string country = 3;\n  string state = 4;\n  string city = 5;\n  string district = 6;\n  string street = 7;\n  string number = 8;\n  google.protobuf.StringValue complement = 9;\n}"}},"requestTimeoutSeconds":"10","id":"0","keys":[{"typeName":"User","selectionSet":"id"},{"typeName":"Address","selectionSet":"id"}]},{"kind":"GRAPHQL","rootNodes":[{"typeName":"Query","fieldNames":["categories"]},{"typeName":"Category","fieldNames":["id","name","description","icon","productCount","serviceCount"]}],"overrideFieldPathFromAlias":true,"customGraphql":{"fetch":{"url":{"staticVariableContent":"dns:///localhost:4012"},"method":"POST","body":{},"baseUrl":{},"path":{}},"subscription":{"enabled":true},"federation":{"enabled":true,"serviceSdl":"type Query {\n  categories: [Category!]!\n}\n\ntype Category @key(fields: \"id\") {\n  id: ID!\n  name: String!\n  description: String!\n  icon: String!\n  productCount: Int!\n  serviceCount: Int!\n}\n"},"upstreamSchema":{"key":"8ee2c623cc5d06328f63ec1faebe1b9532455efb"},"grpc":{"mapping":{"version":1,"service":"ServiceService","operationMappings":[{"type":"OPERATION_TYPE_QUERY","original":"categories","mapped":"QueryCategories","request":"QueryCategoriesRequest","response":"QueryCategoriesResponse"}],"entityMappings":[{"typeName":"Category","kind":"entity","key":"id","rpc":"LookupCategoryById","request":"LookupCategoryByIdRequest","response":"LookupCategoryByIdResponse"}],"typeFieldMappings":[{"type":"Query","fieldMappings":[{"original":"categories","mapped":"categories"}]},{"type":"Category","fieldMappings":[{"original":"id","mapped":"id"},{"original":"name","mapped":"name"},{"original":"description","mapped":"description"},{"original":"icon","mapped":"icon"},{"original":"productCount","mapped":"product_count"},{"original":"serviceCount","mapped":"service_count"}]}]},"protoSchema":"syntax = \"proto3\";\npackage service.v1;\n\noption go_package = \"github.com/wundergraph/service/pkg/generated/service/v1\";\n\n// Service definition for ServiceService\nservice ServiceService {\n  // Lookup Category entity by id\n  rpc LookupCategoryById(LookupCategoryByIdRequest) returns (LookupCategoryByIdResponse) {}\n  rpc QueryCategories(QueryCategoriesRequest) returns (QueryCategoriesResponse) {}\n}\n\n// Key message for Category entity lookup\nmessage LookupCategoryByIdRequestKey {\n  // Key field for Category entity lookup.\n  string id = 1;\n}\n\n// Request message for Category entity lookup.\nmessage LookupCategoryByIdRequest {\n  /*\n   * List of keys to look up Category entities.\n   * Order matters - each key maps to one entity in LookupCategoryByIdResponse.\n   */\n  repeated LookupCategoryByIdRequestKey keys = 1;\n}\n\n// Response message for Category entity lookup.\nmessage LookupCategoryByIdResponse {\n  /*\n   * List of Category entities in the same order as the keys in LookupCategoryByIdRequest.\n   * Always return the same number of entities as keys. Use null for entities that cannot be found.\n   * \n   * Example:\n   *   LookupUserByIdRequest:\n   *     keys:\n   *       - id: 1\n   *       - id: 2\n   *   LookupUserByIdResponse:\n   *     result:\n   *       - id: 1 # User with id 1 found\n   *       - null  # User with id 2 not found\n   */\n  repeated Category result = 1;\n}\n\n// Request message for categories operation.\nmessage QueryCategoriesRequest {\n}\n// Response message for categories operation.\nmessage QueryCategoriesResponse {\n  repeated Category categories = 1;\n}\n\nmessage Category {\n  string id = 1;\n  string name = 2;\n  string description = 3;\n  string icon = 4;\n  int32 product_count = 5;\n  int32 service_count = 6;\n}"}},"requestTimeoutSeconds":"10","id":"1","keys":[{"typeName":"Category","selectionSet":"id"}]},{"kind":"GRAPHQL","rootNodes":[{"typeName":"Query","fieldNames":["services"]},{"typeName":"Service","fieldNames":["id","name","description","price","duration","category","available","location"]}],"overrideFieldPathFromAlias":true,"customGraphql":{"fetch":{"url":{"staticVariableContent":"dns:///localhost:4013"},"method":"POST","body":{},"baseUrl":{},"path":{}},"subscription":{"enabled":true},"federation":{"enabled":true,"serviceSdl":"type Query {\n  services: [Service!]!\n}\n\ntype Service @key(fields: \"id\") {\n  id: ID!\n  name: String!\n  description: String!\n  price: Float!\n  duration: Int!\n  category: String!\n  available: Boolean!\n  location: String!\n}\n"},"upstreamSchema":{"key":"1b92945f20bc05cffb85584a0c4df2f0bf6ecb36"},"grpc":{"mapping":{"version":1,"service":"ServiceService","operationMappings":[{"type":"OPERATION_TYPE_QUERY","original":"services","mapped":"QueryServices","request":"QueryServicesRequest","response":"QueryServicesResponse"}],"entityMappings":[{"typeName":"Service","kind":"entity","key":"id","rpc":"LookupServiceById","request":"LookupServiceByIdRequest","response":"LookupServiceByIdResponse"}],"typeFieldMappings":[{"type":"Query","fieldMappings":[{"original":"services","mapped":"services"}]},{"type":"Service","fieldMappings":[{"original":"id","mapped":"id"},{"original":"name","mapped":"name"},{"original":"description","mapped":"description"},{"original":"price","mapped":"price"},{"original":"duration","mapped":"duration"},{"original":"category","mapped":"category"},{"original":"available","mapped":"available"},{"original":"location","mapped":"location"}]}]},"protoSchema":"syntax = \"proto3\";\npackage service.v1;\n\noption go_package = \"github.com/wundergraph/service/pkg/generated/service/v1\";\n\n// Service definition for ServiceService\nservice ServiceService {\n  // Lookup Service entity by id\n  rpc LookupServiceById(LookupServiceByIdRequest) returns (LookupServiceByIdResponse) {}\n  rpc QueryServices(QueryServicesRequest) returns (QueryServicesResponse) {}\n}\n\n// Key message for Service entity lookup\nmessage LookupServiceByIdRequestKey {\n  // Key field for Service entity lookup.\n  string id = 1;\n}\n\n// Request message for Service entity lookup.\nmessage LookupServiceByIdRequest {\n  /*\n   * List of keys to look up Service entities.\n   * Order matters - each key maps to one entity in LookupServiceByIdResponse.\n   */\n  repeated LookupServiceByIdRequestKey keys = 1;\n}\n\n// Response message for Service entity lookup.\nmessage LookupServiceByIdResponse {\n  /*\n   * List of Service entities in the same order as the keys in LookupServiceByIdRequest.\n   * Always return the same number of entities as keys. Use null for entities that cannot be found.\n   * \n   * Example:\n   *   LookupUserByIdRequest:\n   *     keys:\n   *       - id: 1\n   *       - id: 2\n   *   LookupUserByIdResponse:\n   *     result:\n   *       - id: 1 # User with id 1 found\n   *       - null  # User with id 2 not found\n   */\n  repeated Service result = 1;\n}\n\n// Request message for services operation.\nmessage QueryServicesRequest {\n}\n// Response message for services operation.\nmessage QueryServicesResponse {\n  repeated Service services = 1;\n}\n\nmessage Service {\n  string id = 1;\n  string name = 2;\n  string description = 3;\n  double price = 4;\n  int32 duration = 5;\n  string category = 6;\n  bool available = 7;\n  string location = 8;\n}"}},"requestTimeoutSeconds":"10","id":"2","keys":[{"typeName":"Service","selectionSet":"id"}]},{"kind":"GRAPHQL","rootNodes":[{"typeName":"Query","fieldNames":["offerSections"]},{"typeName":"Product","fieldNames":["id"]},{"typeName":"OfferSection","fieldNames":["id","title","products"]}],"overrideFieldPathFromAlias":true,"customGraphql":{"fetch":{"url":{"staticVariableContent":"dns:///localhost:4014"},"method":"POST","body":{},"baseUrl":{},"path":{}},"subscription":{"enabled":true},"federation":{"enabled":true,"serviceSdl":"type Query {\n  offerSections: [OfferSection!]!\n}\n\ntype Product @key(fields: \"id\", resolvable: false) {\n  id: ID!\n}\n\ntype OfferSection @key(fields: \"id\") {\n  id: ID!\n  title: String!\n  products: [Product!]!\n}\n"},"upstreamSchema":{"key":"ff53ccaa63cc7e1a3477ca862a19bb547de7e47a"},"grpc":{"mapping":{"version":1,"service":"ServiceService","operationMappings":[{"type":"OPERATION_TYPE_QUERY","original":"offerSections","mapped":"QueryOfferSections","request":"QueryOfferSectionsRequest","response":"QueryOfferSectionsResponse"}],"entityMappings":[{"typeName":"Product","kind":"entity","key":"id","rpc":"LookupProductById","request":"LookupProductByIdRequest","response":"LookupProductByIdResponse"},{"typeName":"OfferSection","kind":"entity","key":"id","rpc":"LookupOfferSectionById","request":"LookupOfferSectionByIdRequest","response":"LookupOfferSectionByIdResponse"}],"typeFieldMappings":[{"type":"Query","fieldMappings":[{"original":"offerSections","mapped":"offer_sections"}]},{"type":"Product","fieldMappings":[{"original":"id","mapped":"id"}]},{"type":"OfferSection","fieldMappings":[{"original":"id","mapped":"id"},{"original":"title","mapped":"title"},{"original":"products","mapped":"products"}]}]},"protoSchema":"syntax = \"proto3\";\npackage service.v1;\n\noption go_package = \"github.com/wundergraph/service/pkg/generated/service/v1\";\n\n// Service definition for ServiceService\nservice ServiceService {\n  // Lookup OfferSection entity by id\n  rpc LookupOfferSectionById(LookupOfferSectionByIdRequest) returns (LookupOfferSectionByIdResponse) {}\n  rpc QueryOfferSections(QueryOfferSectionsRequest) returns (QueryOfferSectionsResponse) {}\n}\n\n// Key message for OfferSection entity lookup\nmessage LookupOfferSectionByIdRequestKey {\n  // Key field for OfferSection entity lookup.\n  string id = 1;\n}\n\n// Request message for OfferSection entity lookup.\nmessage LookupOfferSectionByIdRequest {\n  /*\n   * List of keys to look up OfferSection entities.\n   * Order matters - each key maps to one entity in LookupOfferSectionByIdResponse.\n   */\n  repeated LookupOfferSectionByIdRequestKey keys = 1;\n}\n\n// Response message for OfferSection entity lookup.\nmessage LookupOfferSectionByIdResponse {\n  /*\n   * List of OfferSection entities in the same order as the keys in LookupOfferSectionByIdRequest.\n   * Always return the same number of entities as keys. Use null for entities that cannot be found.\n   * \n   * Example:\n   *   LookupUserByIdRequest:\n   *     keys:\n   *       - id: 1\n   *       - id: 2\n   *   LookupUserByIdResponse:\n   *     result:\n   *       - id: 1 # User with id 1 found\n   *       - null  # User with id 2 not found\n   */\n  repeated OfferSection result = 1;\n}\n\n// Request message for offerSections operation.\nmessage QueryOfferSectionsRequest {\n}\n// Response message for offerSections operation.\nmessage QueryOfferSectionsResponse {\n  repeated OfferSection offer_sections = 1;\n}\n\nmessage Product {\n  string id = 1;\n}\n\nmessage OfferSection {\n  string id = 1;\n  string title = 2;\n  repeated Product products = 3;\n}"}},"requestTimeoutSeconds":"10","id":"3","keys":[{"typeName":"Product","selectionSet":"id","disableEntityResolver":true},{"typeName":"OfferSection","selectionSet":"id"}]},{"kind":"GRAPHQL","rootNodes":[{"typeName":"Query","fieldNames":["featuredProducts"]},{"typeName":"Product","fieldNames":["id","name","brand","quantityInStock","price","gallery","description","category","available"]},{"typeName":"FeaturedProductSection","fieldNames":["id","title","products"]}],"overrideFieldPathFromAlias":true,"customGraphql":{"fetch":{"url":{"staticVariableContent":"dns:///localhost:4015"},"method":"POST","body":{},"baseUrl":{},"path":{}},"subscription":{"enabled":true},"federation":{"enabled":true,"serviceSdl":"type Query {\n  featuredProducts: [FeaturedProductSection!]!\n}\n\ntype Product @key(fields: \"id\") {\n  id: ID!\n  name: String!\n  brand: String!\n  quantityInStock: Int!\n  price: Float!\n  gallery: [String!]!\n  description: String!\n  category: String!\n  available: Boolean!\n}\n\ntype FeaturedProductSection @key(fields: \"id\") {\n  id: ID!\n  title: String!\n  products: [Product!]!\n}\n"},"upstreamSchema":{"key":"f1b9cc1e496fd64f533d4fd6acc8ebb209b8c70a"},"grpc":{"mapping":{"version":1,"service":"ServiceService","operationMappings":[{"type":"OPERATION_TYPE_QUERY","original":"featuredProducts","mapped":"QueryFeaturedProducts","request":"QueryFeaturedProductsRequest","response":"QueryFeaturedProductsResponse"}],"entityMappings":[{"typeName":"Product","kind":"entity","key":"id","rpc":"LookupProductById","request":"LookupProductByIdRequest","response":"LookupProductByIdResponse"},{"typeName":"FeaturedProductSection","kind":"entity","key":"id","rpc":"LookupFeaturedProductSectionById","request":"LookupFeaturedProductSectionByIdRequest","response":"LookupFeaturedProductSectionByIdResponse"}],"typeFieldMappings":[{"type":"Query","fieldMappings":[{"original":"featuredProducts","mapped":"featured_products"}]},{"type":"Product","fieldMappings":[{"original":"id","mapped":"id"},{"original":"name","mapped":"name"},{"original":"brand","mapped":"brand"},{"original":"quantityInStock","mapped":"quantity_in_stock"},{"original":"price","mapped":"price"},{"original":"gallery","mapped":"gallery"},{"original":"description","mapped":"description"},{"original":"category","mapped":"category"},{"original":"available","mapped":"available"}]},{"type":"FeaturedProductSection","fieldMappings":[{"original":"id","mapped":"id"},{"original":"title","mapped":"title"},{"original":"products","mapped":"products"}]}]},"protoSchema":"syntax = \"proto3\";\npackage service.v1;\n\noption go_package = \"github.com/wundergraph/service/pkg/generated/service/v1\";\n\n// Service definition for ServiceService\nservice ServiceService {\n  // Lookup FeaturedProductSection entity by id\n  rpc LookupFeaturedProductSectionById(LookupFeaturedProductSectionByIdRequest) returns (LookupFeaturedProductSectionByIdResponse) {}\n  // Lookup Product entity by id\n  rpc LookupProductById(LookupProductByIdRequest) returns (LookupProductByIdResponse) {}\n  rpc QueryFeaturedProducts(QueryFeaturedProductsRequest) returns (QueryFeaturedProductsResponse) {}\n}\n\n// Key message for Product entity lookup\nmessage LookupProductByIdRequestKey {\n  // Key field for Product entity lookup.\n  string id = 1;\n}\n\n// Request message for Product entity lookup.\nmessage LookupProductByIdRequest {\n  /*\n   * List of keys to look up Product entities.\n   * Order matters - each key maps to one entity in LookupProductByIdResponse.\n   */\n  repeated LookupProductByIdRequestKey keys = 1;\n}\n\n// Response message for Product entity lookup.\nmessage LookupProductByIdResponse {\n  /*\n   * List of Product entities in the same order as the keys in LookupProductByIdRequest.\n   * Always return the same number of entities as keys. Use null for entities that cannot be found.\n   * \n   * Example:\n   *   LookupUserByIdRequest:\n   *     keys:\n   *       - id: 1\n   *       - id: 2\n   *   LookupUserByIdResponse:\n   *     result:\n   *       - id: 1 # User with id 1 found\n   *       - null  # User with id 2 not found\n   */\n  repeated Product result = 1;\n}\n\n// Key message for FeaturedProductSection entity lookup\nmessage LookupFeaturedProductSectionByIdRequestKey {\n  // Key field for FeaturedProductSection entity lookup.\n  string id = 1;\n}\n\n// Request message for FeaturedProductSection entity lookup.\nmessage LookupFeaturedProductSectionByIdRequest {\n  /*\n   * List of keys to look up FeaturedProductSection entities.\n   * Order matters - each key maps to one entity in LookupFeaturedProductSectionByIdResponse.\n   */\n  repeated LookupFeaturedProductSectionByIdRequestKey keys = 1;\n}\n\n// Response message for FeaturedProductSection entity lookup.\nmessage LookupFeaturedProductSectionByIdResponse {\n  /*\n   * List of FeaturedProductSection entities in the same order as the keys in LookupFeaturedProductSectionByIdRequest.\n   * Always return the same number of entities as keys. Use null for entities that cannot be found.\n   * \n   * Example:\n   *   LookupUserByIdRequest:\n   *     keys:\n   *       - id: 1\n   *       - id: 2\n   *   LookupUserByIdResponse:\n   *     result:\n   *       - id: 1 # User with id 1 found\n   *       - null  # User with id 2 not found\n   */\n  repeated FeaturedProductSection result = 1;\n}\n\n// Request message for featuredProducts operation.\nmessage QueryFeaturedProductsRequest {\n}\n// Response message for featuredProducts operation.\nmessage QueryFeaturedProductsResponse {\n  repeated FeaturedProductSection featured_products = 1;\n}\n\nmessage Product {\n  string id = 1;\n  string name = 2;\n  string brand = 3;\n  int32 quantity_in_stock = 4;\n  double price = 5;\n  repeated string gallery = 6;\n  string description = 7;\n  string category = 8;\n  bool available = 9;\n}\n\nmessage FeaturedProductSection {\n  string id = 1;\n  string title = 2;\n  repeated Product products = 3;\n}"}},"requestTimeoutSeconds":"10","id":"4","keys":[{"typeName":"Product","selectionSet":"id"},{"typeName":"FeaturedProductSection","selectionSet":"id"}]}],"graphqlSchema":"schema {\n  query: Query\n}\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Query {\n  me: User!\n  categories: [Category!]!\n  services: [Service!]!\n  offerSections: [OfferSection!]!\n  featuredProducts: [FeaturedProductSection!]!\n}\n\ntype User {\n  id: ID!\n  name: String!\n  cpf: String!\n  email: String!\n  dateOfBirth: String!\n  avatar: String!\n  address: Address!\n}\n\ntype Address {\n  id: ID!\n  name: String!\n  country: String!\n  state: String!\n  city: String!\n  district: String!\n  street: String!\n  number: String!\n  complement: String\n}\n\ntype Category {\n  id: ID!\n  name: String!\n  description: String!\n  icon: String!\n  productCount: Int!\n  serviceCount: Int!\n}\n\ntype Service {\n  id: ID!\n  name: String!\n  description: String!\n  price: Float!\n  duration: Int!\n  category: String!\n  available: Boolean!\n  location: String!\n}\n\ntype Product {\n  id: ID!\n  name: String!\n  brand: String!\n  quantityInStock: Int!\n  price: Float!\n  gallery: [String!]!\n  description: String!\n  category: String!\n  available: Boolean!\n}\n\ntype OfferSection {\n  id: ID!\n  title: String!\n  products: [Product!]!\n}\n\ntype FeaturedProductSection {\n  id: ID!\n  title: String!\n  products: [Product!]!\n}","stringStorage":{"d1177e438c8b400dfcd567e9762c845f9765c1ef":"schema {\n  query: Query\n}\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Address @key(fields: \"id\") {\n  city: String!\n  complement: String\n  country: String!\n  district: String!\n  id: ID!\n  name: String!\n  number: String!\n  state: String!\n  street: String!\n}\n\ntype Query {\n  me: User!\n}\n\ntype User @key(fields: \"id\") {\n  address: Address!\n  avatar: String!\n  cpf: String!\n  dateOfBirth: String!\n  email: String!\n  id: ID!\n  name: String!\n}\n\nscalar openfed__FieldSet","8ee2c623cc5d06328f63ec1faebe1b9532455efb":"schema {\n  query: Query\n}\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Category @key(fields: \"id\") {\n  description: String!\n  icon: String!\n  id: ID!\n  name: String!\n  productCount: Int!\n  serviceCount: Int!\n}\n\ntype Query {\n  categories: [Category!]!\n}\n\nscalar openfed__FieldSet","1b92945f20bc05cffb85584a0c4df2f0bf6ecb36":"schema {\n  query: Query\n}\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Query {\n  services: [Service!]!\n}\n\ntype Service @key(fields: \"id\") {\n  available: Boolean!\n  category: String!\n  description: String!\n  duration: Int!\n  id: ID!\n  location: String!\n  name: String!\n  price: Float!\n}\n\nscalar openfed__FieldSet","ff53ccaa63cc7e1a3477ca862a19bb547de7e47a":"schema {\n  query: Query\n}\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype OfferSection @key(fields: \"id\") {\n  id: ID!\n  products: [Product!]!\n  title: String!\n}\n\ntype Product @key(fields: \"id\", resolvable: false) {\n  id: ID!\n}\n\ntype Query {\n  offerSections: [OfferSection!]!\n}\n\nscalar openfed__FieldSet","f1b9cc1e496fd64f533d4fd6acc8ebb209b8c70a":"schema {\n  query: Query\n}\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype FeaturedProductSection @key(fields: \"id\") {\n  id: ID!\n  products: [Product!]!\n  title: String!\n}\n\ntype Product @key(fields: \"id\") {\n  available: Boolean!\n  brand: String!\n  category: String!\n  description: String!\n  gallery: [String!]!\n  id: ID!\n  name: String!\n  price: Float!\n  quantityInStock: Int!\n}\n\ntype Query {\n  featuredProducts: [FeaturedProductSection!]!\n}\n\nscalar openfed__FieldSet"}},"version":"dfbbb4cb-96bf-457e-a571-73a1778983a7","subgraphs":[{"id":"0","name":"customers","routingUrl":"dns:///localhost:4011"},{"id":"1","name":"categories","routingUrl":"dns:///localhost:4012"},{"id":"2","name":"services","routingUrl":"dns:///localhost:4013"},{"id":"3","name":"offers","routingUrl":"dns:///localhost:4014"},{"id":"4","name":"products","routingUrl":"dns:///localhost:4015"}],"compatibilityVersion":"1:0.46.2"}