// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: service/v1/service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/wundergraph/service/pkg/generated/service/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServiceServiceName is the fully-qualified name of the ServiceService service.
	ServiceServiceName = "service.v1.ServiceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceServiceLookupServiceByIdProcedure is the fully-qualified name of the ServiceService's
	// LookupServiceById RPC.
	ServiceServiceLookupServiceByIdProcedure = "/service.v1.ServiceService/LookupServiceById"
	// ServiceServiceQueryServicesProcedure is the fully-qualified name of the ServiceService's
	// QueryServices RPC.
	ServiceServiceQueryServicesProcedure = "/service.v1.ServiceService/QueryServices"
)

// ServiceServiceClient is a client for the service.v1.ServiceService service.
type ServiceServiceClient interface {
	// Lookup Service entity by id
	LookupServiceById(context.Context, *connect.Request[v1.LookupServiceByIdRequest]) (*connect.Response[v1.LookupServiceByIdResponse], error)
	QueryServices(context.Context, *connect.Request[v1.QueryServicesRequest]) (*connect.Response[v1.QueryServicesResponse], error)
}

// NewServiceServiceClient constructs a client for the service.v1.ServiceService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServiceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	serviceServiceMethods := v1.File_service_v1_service_proto.Services().ByName("ServiceService").Methods()
	return &serviceServiceClient{
		lookupServiceById: connect.NewClient[v1.LookupServiceByIdRequest, v1.LookupServiceByIdResponse](
			httpClient,
			baseURL+ServiceServiceLookupServiceByIdProcedure,
			connect.WithSchema(serviceServiceMethods.ByName("LookupServiceById")),
			connect.WithClientOptions(opts...),
		),
		queryServices: connect.NewClient[v1.QueryServicesRequest, v1.QueryServicesResponse](
			httpClient,
			baseURL+ServiceServiceQueryServicesProcedure,
			connect.WithSchema(serviceServiceMethods.ByName("QueryServices")),
			connect.WithClientOptions(opts...),
		),
	}
}

// serviceServiceClient implements ServiceServiceClient.
type serviceServiceClient struct {
	lookupServiceById *connect.Client[v1.LookupServiceByIdRequest, v1.LookupServiceByIdResponse]
	queryServices     *connect.Client[v1.QueryServicesRequest, v1.QueryServicesResponse]
}

// LookupServiceById calls service.v1.ServiceService.LookupServiceById.
func (c *serviceServiceClient) LookupServiceById(ctx context.Context, req *connect.Request[v1.LookupServiceByIdRequest]) (*connect.Response[v1.LookupServiceByIdResponse], error) {
	return c.lookupServiceById.CallUnary(ctx, req)
}

// QueryServices calls service.v1.ServiceService.QueryServices.
func (c *serviceServiceClient) QueryServices(ctx context.Context, req *connect.Request[v1.QueryServicesRequest]) (*connect.Response[v1.QueryServicesResponse], error) {
	return c.queryServices.CallUnary(ctx, req)
}

// ServiceServiceHandler is an implementation of the service.v1.ServiceService service.
type ServiceServiceHandler interface {
	// Lookup Service entity by id
	LookupServiceById(context.Context, *connect.Request[v1.LookupServiceByIdRequest]) (*connect.Response[v1.LookupServiceByIdResponse], error)
	QueryServices(context.Context, *connect.Request[v1.QueryServicesRequest]) (*connect.Response[v1.QueryServicesResponse], error)
}

// NewServiceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceServiceHandler(svc ServiceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serviceServiceMethods := v1.File_service_v1_service_proto.Services().ByName("ServiceService").Methods()
	serviceServiceLookupServiceByIdHandler := connect.NewUnaryHandler(
		ServiceServiceLookupServiceByIdProcedure,
		svc.LookupServiceById,
		connect.WithSchema(serviceServiceMethods.ByName("LookupServiceById")),
		connect.WithHandlerOptions(opts...),
	)
	serviceServiceQueryServicesHandler := connect.NewUnaryHandler(
		ServiceServiceQueryServicesProcedure,
		svc.QueryServices,
		connect.WithSchema(serviceServiceMethods.ByName("QueryServices")),
		connect.WithHandlerOptions(opts...),
	)
	return "/service.v1.ServiceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceServiceLookupServiceByIdProcedure:
			serviceServiceLookupServiceByIdHandler.ServeHTTP(w, r)
		case ServiceServiceQueryServicesProcedure:
			serviceServiceQueryServicesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceServiceHandler struct{}

func (UnimplementedServiceServiceHandler) LookupServiceById(context.Context, *connect.Request[v1.LookupServiceByIdRequest]) (*connect.Response[v1.LookupServiceByIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.v1.ServiceService.LookupServiceById is not implemented"))
}

func (UnimplementedServiceServiceHandler) QueryServices(context.Context, *connect.Request[v1.QueryServicesRequest]) (*connect.Response[v1.QueryServicesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("service.v1.ServiceService.QueryServices is not implemented"))
}
